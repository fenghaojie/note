<<Vim实用技巧>>  学习笔记  20181215

学习之前先用 vimtutor 命令学习vim自带的极简教程

实用原生vim，不加载任何配置文件(如果怀疑是自己的配置影响了vim的行为，可以如此验证),-u None让vim以不加载.vimrc文件方式启动，此时vim会进入兼容模式，-N标志会使能'nocompatible'选项，防止进入vi兼容模式
    vim -u NONE -N
    也可以使vim加载指定配置文件
    vim -u ~/my_vim_config_file.vim

技巧1 结识'.'命令
    . 命令会重复上次的修改
    什么是修改?
        在普通模式中执行的命令，如'x', 'dd', '>' 命令
            x  删除光标位置的一个字符
            dd 删除一整行
            >G 从当前行开始到文件末尾的内容增加一个缩进层级
        从进入插入模式那一刻开始，直到返回普通模式时为止，vim会记录每一个按键操作，这些操作的集合形成一次修改


技巧2 不要自我重复
    场景适合的时候，尽量使用复合命令与'.'命令，如：
    a 在当前光标之后进行插入 等价于 li
    A 在当前行末尾进行插入   等价于 $a
    C 从当前光标位置删除到行尾，并进入插入模式  等价于 d$a
    s 删除当前光标所在位置字符，并进入插入模式  等价于 xi
    S 从当前行缩进结束处删除到行尾，并进入插入模式  等价于  ^c$
    I 从当前行缩进结束处进入插入模式 等价于  ^i
    o 在当前行的下方插入一行，并进入插入模式  等价于  A<CR>
    O 在当前行的上方插入一行，并进入插入模式  等价于  ko


技巧3 以退为进
    f{char} 在本行寻找指定字符
    ;       重复上次查找命令
    
    用以上两个命令，在下例中的'+'字符前后增加空格：
        var foo = "method("+argument1+","+argument2+")";
    用了2次命令 ';.'


技巧4 执行、重复、回退
    f{char} 在本行寻找指定字符
    .       重复执行上次修改
    u       撤销上次修改
    ;       重复上次查找命令
    ,       反向查找

    可重复的操作以及如何回退：
    目的                      操作                      重复     回退
    做出一次修改              {edit}                    .        u
    在行内查找下一指定字符    f{char}/t{char}           ;        ,
    在文档中查找下一匹配项    /pattern<CR>              n        N
    在文档中查找上一匹配项    ?pattern<CR>              n        N
    执行替换                  :s/target/replacement     &        u
    执行一些列修改            qx{changes}q              @x       u


技巧5 查找并手动替换
    * 查找光标所在位置的单词 等价于 /{光标所在位置单词}
    :%s/word/happy/g 在全文中查找单词word并替换为happy
    :%s/word/happy/gc 在全文中查找单词word并在替换为happy前询问是否替换
    :s/word/happy/ 在当前行查找单词word并替换为happy
    :s/word/happy/c 在当前行查找单词word,替换为happy前询问是否替换
    :s/word/happy/g 将当前行中的单词word全部替换为happy
    :s/word/happy/gc 将当前行中的单词word全部替换为happy,替换前询问是否替换


技巧6 结识.范式
    理想模式：
        用一个按键移动光标，另一个按键执行



第一部分 模式

第二章 普通模式

技巧8 把撤销单元切成块
    u 撤销上一次的修改
    在插入模式中移动光标会重置修改状态
        如果在插入模式中使用 <Up> <Down> <Left> <Right>这些光标按键，将会产生一个新的撤销块


技巧9 构造可重复的修改
    b 光标回退到上一个单词的词首
    c 光标前进到下一个单词的词首
    e 光标前进到本单词的词尾

    删除下例中的单词nigh，光标位于h
    The end is nigh
    有三种方法：(第三种方法中的aw为文本对象，而不是动作命令，后续会专门介绍)
    dbx
    bdw
    daw
    都按了三次键，到底哪种更好呢？
    dbx删除了单词后，命令.只会执行x
    bdw删除了单词后，命令.会执行dw 但是光标在行尾，没什么意义
    daw删除了单词后，命令.依然可以删除一个单词，它会方便我们在别处继续进行删除操作，因此最佳


技巧10 用次数做简单的算术运算
    <C-a> 对数字进行加法操作
    <C-x> 对数字进行减法操作
    
    执行上述命令时，若光标不在数字上，则会在当前行正向查找一个数字，如果找到了就跳到那里执行操作

    若数字是以0开头的，则会默认为是八进制加减操作，如果不希望这样，可以在配置文件中加入：
    set nrformat=


技巧11 能够重复，就别用次数
    计算次数非常讨厌，还可能数错，因此使用单次命令，尽可能使用'.'命令，即使多用了，也可以用u命令回退，参见技巧4.
    只在必要时使用次数


技巧12 双剑合璧，天下无敌
    Vim 的强大很大程度上源自操作符与动作命令相结合

    操作符 + 动作命令 = 操作 (作用的范围由动作命令决定)
        d{motion}命令可以如下组合：
            dl 删除一个字符
            daw 删除一个完整单词
            dap 删除一个段落
        c{motion}、y{motion}以及一些其它命令也类似    

    gU{motion} 将motion代表的范围内的字符转为大写
    gu{motion} 将motion代表的范围内的字符转为小写
    gUU        将整行里的字符转为大写
    guu        将整行里的字符转为小写
    gUw        将当前单词转为大写
    guw        将当前单词转为小写
    g~{motion} 反转大小写
    g~~        反转当前行的大小写
    ~          转换当前字符的大小写
    >>         增加当前行缩进
    <<         减少当前行缩进
    ==         自动缩进当前行

    vim的操作符命令：
    命令       用途
    c          修改
    d          删除
    y          复制到寄存器
    g~         转换大小写
    gu         转换为小写
    gU         转换为大写
    >          增加缩进
    <          减少缩进
    =          自动缩进
    !          使用外部程序过滤{motion}所跨越的行

    自定义操作符与已有动作命令协同工作
        随同vim发布的标准操作符集合相对比较少，但我们可以定义新的操作符。Tim Pope的commentary.vim插件提供了一个很好的例子，此插件为vim所支持的变成语言增添了注释及取消注释的命令。
        如何创建自定义操作符，可以参考文档 :h :map-operator

    自定义动作命令与已有操作符协同工作
        Vim缺省的动作命令集已经相当全面了，但是我们还是可以定义新的动作命令集文本对象来进一步增强它。
        Kana Natsuno的textobj-entire插件是一个很好的例子，它为vim增加了两种新的文本对象ie和ae，他们作用于整个文件。
        如何创建自定义动作命令，可以阅读 :h omap-info


第三章 插入模式

技巧13 在插入模式中可即时更正错误
    如果在插入模式中撰写文本时出了错，我们可以立刻对它进行更正，而无需切换模式。要迅速更正错误，除了用退格键外，我们还可以用插入模式中的其他一些命令。
    在输入错误时，如果出错的地方靠近单词结尾，用退格键删除错误的文本或许是最快的修正方式。但如果出错位置在单词开头呢？
    退出插入模式，在普通模式进行处理，可能需要的时间不止1秒，我们还可以试试下面这些组合键：
    按键操作           用途
    <C-h>              删除前一个字符(同退格键)
    <C-w>              删除前一个单词
    <C-u>              删至行首

    上述这些命令不是插入模式所独有的，甚至也不是vim所独有的，在vim的命令模式中，以及在bash shell中，也可以使用它们。

技巧14 返回普通模式
    切换回普通模式的经典方式是<Esc>键，但有的键盘上这个键的距离似乎有点远，作为替代，也可以用<C-[>
    按键操作         用途
    <Esc>            切换到普通模式
    <C-[>            切换到普通模式
    <C-o>            切换到插入-普通模式

    在特定场景下，模式的切换会比较繁琐：当我们处于插入模式，想运行一个普通模式的命令，然后马上回到原来的位置继续输入，此时可以使用插入-普通模式，此模式会推出插入模式，进入普通模式，执行完用户的一个命令后，回到插入模式。切换到插入-普通模式，可以按<C-o>

    zz 当我们的当前行处于窗口的顶部或底部时，我们想要看到较多的上下文，可以使用zz命令，它会滚动重绘屏幕，使当前行处于窗口正中，在插入模式中时就可以<C-o>zz

技巧15 不离开插入模式，粘贴寄存器中的文本
    vim的复制和粘贴都是在普通模式中执行，有时我们也许不想离开插入模式，直接在文档里粘贴文本
    普通模式中大小写按键有很大的区别，比如：
    K 查看光标之下的单词的手册页
    J 把当前行与下一行连接在一起

    同时，在大多数键盘上<Esc>与<Ctrl>键不容易够得到，大小写转换键对我们意义并不大，因此将<Caps-Lock>键映射为<Esc>或<Ctrl>键会是一个很好的选择，这里我选择映射为<Ctrl>键

    t{char} 向后查找字符{char}，并将光标置于{char}之前
    f{char} 向后查找字符{char}，并将光标置于{char}的位置
    T{char} 向前查找字符{char}，并将光标置于{char}之后
    F{char} 向前查找字符{char}，并将光标置于{char}的位置

    yt, 从光标所在位置复制字符','之后的内容
    yT, 从光标所在位置复制字符','之前的内容
    yf, 从光标所在位置向后复制到','
    yF, 从光标所在位置向前复制到','

    <C-r>0 在插入模式中将寄存器0中的内容粘贴到当前位置
    该命令的工作方式与文本输入相同，即一个字符一个字符的插入，因此如果寄存器中文本多时会有一定延迟，并且如果vim的`textwidth`或者`autoindent`被激活的话，就有可能会产生额外的换行或缩进，如果需要原样插入的话，就需要用下述命令
    <C-r><C-p>{register} 原样插入寄存器中的内容

    上述方式按键较多，有时候还不如去普通模式修改


技巧16 随时随地做运算
    我们之前的命令都是保存文本到寄存器中，或者把寄存器中的内容插入到文档里。vim还有一种表达式寄存器，可以执行一段vim脚本，并返回其结果

    =符号指明使用表达式寄存器，在插入模式中<C-r>=就可以访问表达式寄存器，输入完表达式后，按下<CR>就可以将计算结果插入到当前位置，例如下例，不需退出插入模式，即可完成输入：
    6 chairs, each costing $35, totals $

    表达式寄存器远不止能做简单算术运算，技巧70将介绍更高级的应用


技巧17 用字符编码插入非常用字符
    vim可以用字符编码插入任意字符，使用此功能可以很方便的输入键盘上找不到的符号。
    <C-v>{code} {code}是要插入字符的编码，code共包含3位数字，如字母'A'，它的字符编码是65，因此需要输入<C-v>065
    如果插入一个编码超过3位数的字符，比如unicode编码，<C-v>u{code} 其中code为16进制
    更多详细内容可以参考 :h -_CTRL-V_digit

    如果想知道文档中任意字符的编码，只需把光标移到它上面并按ga命令，就会在屏幕下方看到该字符的编码，如果想查看的是文档中不存在的字符，就只能查看unicode编码表了

    如果<C-v>命令后面跟一个非数字键，它会插入这个按键本身所代表的字符。如果启用了`expandtab`选项，那么按<Tab>键会插入空格而不是制表符,然而，按<C-v><Tab>则会一直插入制表符，不论`expandtab`是否激活
    按键操作              用途
    <C-v>{123}            以十进制字符编码插入字符
    <C-v>u{1234}          以十六进制字符编码插入字符
    <C-v>{nondigit}       按原义插入非数字字符
    <C-k>{char1}{char2}   插入以二合字母{char1}{char2}表示的字符


技巧18 用二合字母插入非常用字符
    虽然vim允许我们用数字编码插入任意字符，但这既难记忆又难输入，因此提供了二合字母来插入非常用字符

    <C-k>?I   ¿
    <C-k><<   «
    <C-k>>>   »
    普通分数表示
    <C-k>12   ½
    <C-k>14   ¼
    <C-k>34   ¾

    vim的二合字母集依从一定的惯例，可以参考  :h digraphs-default
    命令 :digraphs 可以查看可用的二合字母列表，不过该命令的输出不太好阅读
    命令 :h digraphs-table 查看另一个更为有用的列表
    

技巧19 用替换模式替换已有文本
    R命令可以由普通模式进入替换模式，一直向后替换，直到回退到普通模式
    某些字符会使替换模式变得复杂化，比如<Tab>字符，在文件中以单个字符表示，但在屏幕上它却会占据若干列的宽度，此宽度由`tabstop`设置决定，如果把光标移到制表符上，然后进入替换模式，那么我们输入的下一个字符将会替换制表符，假如`tabstop`选项设置为8，那么这将会大幅缩短当前行的长度
    vim还有另外一种替换模式，成为虚拟替换模式，该模式由gR触发，它会把制表符当成一组空格处理，此模式下，会将输入的前几个字符插入到制表符之前，`tabstop`指定的最后一个字符替换制表符。这会以屏幕上实际显示的宽度来替换字符，减少意外情况的发生，因此在可能的情况下尽量使用虚拟替换模式
    vim也提供单次版本的替换模式及虚拟替换模式，r{char} 和 gr{char} ，它允许我们替换一个字符然后回到普通模式


第4章 可视模式
    vim有3种不同的可视模式，分别用于操作字符文本、行文本、快文本

技巧20 深入理解可视模式
    在vim的可视模式中移动光标会改变高亮选取的边界，比如：w e b f{char} ; , n/N h j k l等等

技巧21 选择高亮选取
    普通模式下，按v可以激活面向字符的可视模式
    普通模式下，按V可以激活面向行的可视模式
    普通模式下，按<C-v>可以激活面向块的可视模式
    普通模式下，按gv重选上次的高亮选取
    可视模式下，按o切换高亮选取的活动端点

    如果在定义选区时，定义到一半发现选取开始位置不对，用o键切换端点会很方便

技巧22 重复执行面向行的可视命令
    选定选区后，执行单次命令操作，并用.进行多次重复动作

技巧23 只要可能，最好用操作符命令，而不是可视命令
    当一条可视模式命令被重复执行时，它会影响相同数量的文本，因此，在需要.命令重复执行多次时，可视操作会有奇怪的结果
    如果想使用.命令做一些有用的事情时，要尽量原理可视模式，这并不是说可视模式出局了，它仍然有适用的场景，对于一次性的修改任务以及有时要修改的文本范围结构很难用动作命令表达时，它很擅长，如下例，使用viwU修改第一行后，使用.命令继续修改余下两行时：
    ab
    abc
    abcd

技巧24 用面向列块的可视模式编辑表格数据
    面向列块的可视模式是选中某几列进行操作

技巧25 修改列文本

