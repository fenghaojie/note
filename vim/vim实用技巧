<<Vim实用技巧>>  学习笔记  20181215

学习之前先用 vimtutor 命令学习vim自带的极简教程

实用原生vim，不加载任何配置文件(如果怀疑是自己的配置影响了vim的行为，可以如此验证),-u None让vim以不加载.vimrc文件方式启动，此时vim会进入兼容模式，-N标志会使能'nocompatible'选项，防止进入vi兼容模式
    vim -u NONE -N
    也可以使vim加载指定配置文件
    vim -u ~/my_vim_config_file.vim

技巧1 结识'.'命令
    . 命令会重复上次的修改
    什么是修改?
        在普通模式中执行的命令，如'x', 'dd', '>' 命令
            x  删除光标位置的一个字符
            dd 删除一整行
            >G 从当前行开始到文件末尾的内容增加一个缩进层级
        从进入插入模式那一刻开始，直到返回普通模式时为止，vim会记录每一个按键操作，这些操作的集合形成一次修改


技巧2 不要自我重复
    场景适合的时候，尽量使用复合命令与'.'命令，如：
    a 在当前光标之后进行插入 等价于 li
    A 在当前行末尾进行插入   等价于 $a
    C 从当前光标位置删除到行尾，并进入插入模式  等价于 d$a
    s 删除当前光标所在位置字符，并进入插入模式  等价于 xi
    S 从当前行缩进结束处删除到行尾，并进入插入模式  等价于  ^c$
    I 从当前行缩进结束处进入插入模式 等价于  ^i
    o 在当前行的下方插入一行，并进入插入模式  等价于  A<CR>
    O 在当前行的上方插入一行，并进入插入模式  等价于  ko


技巧3 以退为进
    f{char} 在本行寻找指定字符
    ;       重复上次查找命令
    
    用以上两个命令，在下例中的'+'字符前后增加空格：
        var foo = "method("+argument1+","+argument2+")";
    用了2次命令 ';.'


技巧4 执行、重复、回退
    f{char} 在本行寻找指定字符
    .       重复执行上次修改
    u       撤销上次修改
    ;       重复上次查找命令
    ,       反向查找

    可重复的操作以及如何回退：
    目的                      操作                      重复     回退
    做出一次修改              {edit}                    .        u
    在行内查找下一指定字符    f{char}/t{char}           ;        ,
    在文档中查找下一匹配项    /pattern<CR>              n        N
    在文档中查找上一匹配项    ?pattern<CR>              n        N
    执行替换                  :s/target/replacement     &        u
    执行一些列修改            qx{changes}q              @x       u


技巧5 查找并手动替换
    * 查找光标所在位置的单词 等价于 /{光标所在位置单词}
    :%s/word/happy/g 在全文中查找单词word并替换为happy
    :%s/word/happy/gc 在全文中查找单词word并在替换为happy前询问是否替换
    :s/word/happy/ 在当前行查找单词word并替换为happy
    :s/word/happy/c 在当前行查找单词word,替换为happy前询问是否替换
    :s/word/happy/g 将当前行中的单词word全部替换为happy
    :s/word/happy/gc 将当前行中的单词word全部替换为happy,替换前询问是否替换


技巧6 结识.范式
    理想模式：
        用一个按键移动光标，另一个按键执行



第一部分 模式

第二章 普通模式

技巧8 把撤销单元切成块
    u 撤销上一次的修改
    在插入模式中移动光标会重置修改状态
        如果在插入模式中使用 <Up> <Down> <Left> <Right>这些光标按键，将会产生一个新的撤销块


技巧9 构造可重复的修改
    b 光标回退到上一个单词的词首
    c 光标前进到下一个单词的词首
    e 光标前进到本单词的词尾

    删除下例中的单词nigh，光标位于h
    The end is nigh
    有三种方法：(第三种方法中的aw为文本对象，而不是动作命令，后续会专门介绍)
    dbx
    bdw
    daw
    都按了三次键，到底哪种更好呢？
    dbx删除了单词后，命令.只会执行x
    bdw删除了单词后，命令.会执行dw 但是光标在行尾，没什么意义
    daw删除了单词后，命令.依然可以删除一个单词，它会方便我们在别处继续进行删除操作，因此最佳


技巧10 用次数做简单的算术运算
    <C-a> 对数字进行加法操作
    <C-x> 对数字进行减法操作
    
    执行上述命令时，若光标不在数字上，则会在当前行正向查找一个数字，如果找到了就跳到那里执行操作

    若数字是以0开头的，则会默认为是八进制加减操作，如果不希望这样，可以在配置文件中加入：
    set nrformat=


技巧11 能够重复，就别用次数
    计算次数非常讨厌，还可能数错，因此使用单次命令，尽可能使用'.'命令，即使多用了，也可以用u命令回退，参见技巧4.
    只在必要时使用次数


技巧12 双剑合璧，天下无敌
    Vim 的强大很大程度上源自操作符与动作命令相结合

    操作符 + 动作命令 = 操作 (作用的范围由动作命令决定)
        d{motion}命令可以如下组合：
            dl 删除一个字符
            daw 删除一个完整单词
            dap 删除一个段落
        c{motion}、y{motion}以及一些其它命令也类似    

    gU{motion} 将motion代表的范围内的字符转为大写
    gu{motion} 将motion代表的范围内的字符转为小写
    gUU        将整行里的字符转为大写
    guu        将整行里的字符转为小写
    gUw        将当前单词转为大写
    guw        将当前单词转为小写
    g~{motion} 反转大小写
    g~~        反转当前行的大小写
    ~          转换当前字符的大小写
    >>         增加当前行缩进
    <<         减少当前行缩进
    ==         自动缩进当前行

    vim的操作符命令：
    命令       用途
    c          修改
    d          删除
    y          复制到寄存器
    g~         转换大小写
    gu         转换为小写
    gU         转换为大写
    >          增加缩进
    <          减少缩进
    =          自动缩进
    !          使用外部程序过滤{motion}所跨越的行

    自定义操作符与已有动作命令协同工作
        随同vim发布的标准操作符集合相对比较少，但我们可以定义新的操作符。Tim Pope的commentary.vim插件提供了一个很好的例子，此插件为vim所支持的变成语言增添了注释及取消注释的命令。
        如何创建自定义操作符，可以参考文档 :h :map-operator

    自定义动作命令与已有操作符协同工作
        Vim缺省的动作命令集已经相当全面了，但是我们还是可以定义新的动作命令集文本对象来进一步增强它。
        Kana Natsuno的textobj-entire插件是一个很好的例子，它为vim增加了两种新的文本对象ie和ae，他们作用于整个文件。
        如何创建自定义动作命令，可以阅读 :h omap-info


第三章 插入模式

技巧13 在插入模式中可即时更正错误
    如果在插入模式中撰写文本时出了错，我们可以立刻对它进行更正，而无需切换模式。要迅速更正错误，除了用退格键外，我们还可以用插入模式中的其他一些命令。
    在输入错误时，如果出错的地方靠近单词结尾，用退格键删除错误的文本或许是最快的修正方式。但如果出错位置在单词开头呢？
    退出插入模式，在普通模式进行处理，可能需要的时间不止1秒，我们还可以试试下面这些组合键：
    按键操作           用途
    <C-h>              删除前一个字符(同退格键)
    <C-w>              删除前一个单词
    <C-u>              删至行首

    上述这些命令不是插入模式所独有的，甚至也不是vim所独有的，在vim的命令模式中，以及在bash shell中，也可以使用它们。

技巧14 返回普通模式
    切换回普通模式的经典方式是<Esc>键，但有的键盘上这个键的距离似乎有点远，作为替代，也可以用<C-[>
    按键操作         用途
    <Esc>            切换到普通模式
    <C-[>            切换到普通模式
    <C-o>            切换到插入-普通模式
