<<Python编程从入门到实践>>学习笔记

第二章 变量和简单数据类型
  2.1
    print("hello world")
    msg = "hello world"
    print(msg)

  2.3 字符串
    用引号括起的都是字符串，引号可以是单引号，也可以是双引号
    print("hello 'world'")
    print('hello "world"')
    msg = " hello world  "
    print(msg.title()) #将每个单词的首字母大写
    print(msg.upper()) #转大写
    print(msg.lower()) #转小写
    print(msg.lstrip()) #移除字符串左边的空白
    print(msg.rstrip()) #移除字符串右边的空白
    print(msg.strip())  #移除字符串两边的空白
    print("Lucy, " + msg.title()) #字符串拼接
    print("hello\n\tworld") #换行和制表符

    python2中，print不需要括号  print "hello world"
    python3中，print是函数，需要括号  print ("hello world")

  2.4 数字
    python中可以对整数执行+-*/运算
    2 + 3
    2 * 3
    两个乘号表示乘方运算
    3 ** 2
    3 ** 3
    python支持运算次序，也可以用括号改变运算次序

    python将带小数点的数字都成为浮点数，浮点数也可以进行+-*/，但需要注意的是，结果包含的小数位数是不确定的
    
    函数 str() 让python将非字符串值表示为字符串
    age = 18
    print ("Happy " + str(age) + "rd Birthday")

    python2中，整数除以整数结果为整数，小数部分会被删除
    python3中，整数除以整数结果是实际结果

  2.5 注释
    python中注释用 # 标识，#号后的内容会被解释器忽略

  2.6 python之禅
    python社区的理念都包含在Tim Peters撰写的Python之禅中，要获悉这些内容，在解释器中执行下述语句就可以得到
    import this

第三章 列表简介
  3.1 列表是什么
    在python中用方括号[]来标识列表，并用逗号分隔其中的元素，用print函数打印列表时，会将方括号也打印出来
    列表的索引从0开始，可以使用索引访问列表元素 letters[1]，访问元素时，只会返回元素内容，不包含方括号与引号
    索引为-1表示访问列表最后一个元素，索引为负数代表访问倒数第几个元素，仅当列表为空时，这样访问会报错

  3.2 修改、添加和删除元素
    letters[0] = 'd'  #修改列表letters索引为0处的元素值
    letters.append('z')  #在列表末尾添加元素
    letters.insert(0, 'a')  #在列表letters索引为0处插入元素
    empty_list = [] #创建空列表
    
    del letters[2] #删除索引为2处的元素
    val = letters.pop() #弹出列表末尾的元素，并存到变量val中
    val = letters.pop(2) #弹出列表索引为2处的元素，并存到变量val中
    letters.remove('d') #移除列表中第一个值为d的元素

  3.3 组织列表
    letters.sort() #对列表按元素字母顺序排序
    letters.sort(reverse=True) #对列表按字母顺序相反顺序排序
    
    arr = sorted(letters) #按元素字母顺序排序，但不改变列表中的元素顺序，并存到列表arr中
    arr = sorted(letters, reverse=True) #按元素字母顺序相反顺序排序，但不改变列表中元素的顺序，并存到列表arr中

    reverse(letters) #反序列表元素顺序，如需回复列表，再次执行reverse函数

    list_length = len(letters) #获取列表长度，并存到变量list_length中

第四章 操作列表
  4.1 遍历整个列表
    # 遍历列表letters，for循环语句下面的带缩进的每行都认为是for循环体的一部分
    for elem in letters:
        print(elem)

  4.2 避免缩进错误
    for循环语句后的:号
    for循环语句下的带缩进的行都认为是for循环体

  4.3 创建数值列表
    range(1, 5) #创建一系列的数字，左闭右开
    for elem in range(1, 5):
        print(elem)

    numbers = list(range(1,6)) #用list()函数将range生成的结果转为数字列表

    使用range时还可以指定步长
    numbers = list(range(1, 10, 2)) #步长为2

    min(numbers) #求数字列表中最小元素
    max(numbers) #求数字列表总最大元素
    sum(numbers) #求数字列表元素总和

    列表解析 由列表名，方括号，表达式，for循环组成，其中for循环提供值给表达式，生成列表元素
    numbers = [value**2 for value in range(1, 11)]

  4.4 使用列表的一部分
    切片，要使用切片，需要指定要使用的第一个元素和最后一个元素的索引，与range()函数一样，到达最后一个索引时停止
    print(letters[0:3]) #打印索引为0,1,2的元素
    print(letters[1:4]) #打印索引为1,2,3的元素
    切片起始索引省略时，代表从0开始，结束索引省略时，代表到列表末尾
    print(letters[:3])
    print(letters[3:])
    print(letters[-3:])
    print(letters[:-3])

    # 遍历切片
    for elem in letters[:-3]:
        print(elem)

    # 列表复制
    copy_letters = letters #这种方式只是将变量copy_letters也关联到了变量letters关联的列表，修改列表后，两者的内容都发生改变
    copy_letters = letters[:] #这种方式将创建的letters切片副本赋值给copy_letters，letters与copy_letters关联的是不同的列表

  4.5 元组
    python将不能修改的值成为不可变的，而不可变的列表被称为元组

    元组看起来犹如列表，但使用圆括号，而不是方括号来标识
    tp = (100, 200, 300)
    print(tp[1]) #修改元组元素值时，解释器会报错

    虽然元组元素值不可改变，但是元组变量可以被重新赋值

第五章 if语句
  5.2 条件测试
    val = 'Hello'
    if val == 'Hello':
        print("equals")
    else:
        print("not equals")

    if val != 'hello':
        print("not equals")
    else:
        print("equals")
    dig = 10
    if dig == 10:
        print("equals")
    else:
        print("not equals")
    
    dig < 11
    dig <= 10
    dig > 9
    dig >= 10

    使用and和or检查多个条件
    if dig > 7 and dig < 12:
        print("ok")
    if dig >7 or dig < 12:
        print("ok")

    检查列表中是否包含特定值
    if 'd' in letters:
        print("in")

    检查特定值是否不包含在列表中
    esp = "d"
    if esp not in letters:
        print("not in")

    布尔表达式
    game_active = True
    can_edit = False

  5.3 if语句
    if age < 4:
        print("4")
    elif age < 18:
        print("18")
    else:
        print("old")

  5.4 使用if语句处理列表
    if letters:
        print("列表letters非空")
    else:
        print("列表letters是空的")

第六章 字典
  6.2 使用字典
    字典是一系列键值对
    dic = {'color':'green', 'age':18} #键值对都放在花括号中，键和值用冒号分隔，键值对之间用逗号分隔
    print(dic['color']) #访问键对应的值
    dic['name'] = 'xiaoming' #添加键值对
    empty_dic = [] #创建空字典
    dic['color'] = 'red' #修改键对应的值
    del dic['color'] #删除键值对
    用多行来定义字典时，在输入花括号后按回车，再增加缩进，其它行也需要跟着缩进
    favorite_languages = {
        'jen':'python',
        'sarah':'c',
        }
    类似
    print("hello world" +
        "favo"
        )

  6.3 遍历字典
    user_0 = {
        'username':'enrico',
        'first':'enrico',
        'last':'fermi',
        }
    # key, value为自定义的变量，items()函数返回一个键值对列表
    for key, value in user_0.items():
        print("\nKey: " + key)
        print("Value: " + value)

    遍历字典中的所有键，keys()函数返回一个包含所有键的列表
    for key in user_0.keys():
        print(key.title())

    判断是否存在某个键
    if key in user_0:
        print("in")
    也可以
    if key in user_0.keys():
        print("in")

    遍历字典中所有值
    for value in user_0.values():
        print(value.title())

    字典中的键不会重复，而值却很有可能重复，若要去掉重复的元素，可以使用集合set
    for value in set(user_0.values()):
        print(value.title())

  6.4 嵌套
    列表中元素为字典，或字典中元素为列表，或字典中存储字典

第七章 用户输入和while循环
  7.1 函数input()的工作原理
    函数input()让程序暂停运行，等待用户输入一些文本，获取后python将其存放到一个变量中，它接受一个参数，作为用户输入的提示
    message = input("Please input user name: ")
    print(message)

    使用input()函数时，python将用户输入解读为字符串
    函数 int() 让python将用户输入解读为10进制整数
    message = input("Enter your age: ")
    age = int(age)
    print(age)
    函数 float() 让python将字符串解读为浮点数

    在python2中获取用户输入的是 raw_input() 函数

  7.2 while循环简介
    number = 0
    while number < 10:
        if (number == 7):
            break
        if (number == 3):
            continue
        print(str(number))
        number += 1

第八章 函数
  8.1 定义函数
    def greet_user():
        """显示简单问候语"""
        print("Hello!")

    三个引号代表是文档字符串注释，描述了函数时做什么的，python使用它们来生成有关程序中函数的文档
    调用时只需输入 greet_user() 即可

  8.2 传递实参
    def greet_animal(animal_name, animal):
        print("Hello " + animal.title() + " " + animal_name)

    greet_animal("xiaohu", "dog")

    greet_animal(animal="dog", animal_name="xiaohu") #指定参数

    # 形参设置默认值，如不传入值，则取默认值
    def greet_dog(dog_name, animal="dog"):
        print("hello " + animal.title() + " " + dog_name)

  8.3 返回值
    只需要在函数中使用return语句即可返回值
    def add(a, b):
        return a+b;
    可以返回任意的python类型元素或自定义元素

  8.4 传递列表
    向函数通过参数传递一个列表，在函数内对列表做的修改，操作的都是原始列表，如果不希望修改原始数据，则可以通过切片传入列表副本
    letters = []
    def modify(listName):
        # 一些修改

    modify(letters) #直接对letters修改
    modify(letters[:]) #修改的是切片副本

  8.5 传递任意数量的实参
    任意多个参数，*号会使解释器创建一个空元组，并将收到的所有值都封装到这个元组中
    def add(*numbers):
        sum = 0
        for number in numbers:
            sum += number
        
        return sum

    有时候需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息，这时，可将函数编写成能够接受任意数量的键值对，**会让python解释器创建一个空字典，并将收到的所有键值对都存到这个字典中
    def build_personal_info(firstName, lastName, **otherInfo):
        info = {}
        info['first_name'] = firstName
        info['last_name'] = lastName
        for key, value in otherInfo.items():
            info[key] = value
        return info

    my_info = build_personal_info('feng', 'haojie', age=18, sex='男')

  8.6 将函数存储在模块中
    将上述函数 build_personal_info() 放到person.py文件中，在另一个make_person.py文件中需要用build_personal_info()函数时，就需要导入该模块，使用方式为 import person 这将会导入整个person.py模块
    import person
    person.build_personal_info() #这种方式需要模块加句点调用

    只导入模块中的某个函数
    from person import build_personal_info
    build_personal_info() #这种方式无需使用句点

    使用as给函数指定别名，如果别的模块中的函数与本模块中的函数名称冲突或者名字太长之类的，就可以定义别名来调用
    from person import build_personal_info as bpi
    bpi()
    也可以给模块指定别名
    import person as p
    p.build_personal_info()

    导入模块中的所有函数
    from person import *

    最佳做法是，要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法调用，可避免名称冲突，避免意想不到的结果

  8.7 函数编写指南
    给形参指定默认值时，等号两边不要有空格
    函数调用中的关键字实参，等号两边也不要有空格

    两个函数之间用两个空行隔开
    所有的import语句都应放在文件开头，唯一的例外是开头使用了注释


第九章 类
  9.1 创建和使用类
    class Dog():
        """一个小狗的类"""
        
        def __init__(self, name, age):
            """初始化属性name和age"""
            self.name = name
            self.age = age

        def sit(self):
            """模拟小狗被命令蹲下"""
            print(self.name.title() + " is now sitting.")

    Dog dog("xiaohu", 1)
    dog.sit()
    print(dog.name.title())

    __init__()是一个特殊的方法，每当根据Dog类创建新实例时，python都会调用它，形参self必不可少，还必须位于其它形参前面，它是一个指向实例本身的引用，我们在调用方法时，不需要传递它，只需要提供我们定义的参数
    以self为前缀的变量都可供类中的所有方法使用，我们可以通过类的任何实例来访问这些变量

    在python2中创建类，要按下面的格式
    class Dog(object):

  9.3 继承
    class ElectricCar(Car):
        """电动汽车，继承自Car"""
        
        def __init__(self, name):
            """初始化父类的属性"""
            super().__init__(name)

    创建子类时，父类必须包含在当前文件中，且位于子类前面，super()是一个特殊函数，帮助python将父类和子类关联起来
    重写父类方法时，重新实现该方法就行

  9.4 导入类
    from car import Car #从模块中导入一个类
    from car import Car, SmallCar #从模块中导入多个类
    import car #导入整个模块
    from car import * #导出模块中的所有类

    需要从一个模块中导入很多类时，最好导入整个模块，并使用 modele_name.class_name语法来访问类

  9.5 python标准库
    导入标准库模块，即可使用标准库
    默认的字典并不会记录其中的键值对添加顺序，需要时可使用collections模块中的OrderedDict类
    from collections import OrderedDict
    od = OrderdDict()
    od['hello'] = 'world'

  9.6 类编码风格
    类名应采用驼峰命名法，每个单词的首字母大写，并且不使用下划线
    实例名和模块名都采用小写格式，单词之间加上下划线
    对于每个类，都应紧跟在类定义后面包含一个文档字符串，简要描述类功能，并遵循编写函数的文档字符串时采用的格式约定
    每个模块也都应包含一个文档字符串，对其中的类可用于做什么进行描述
    在类中，可使用一个空行来分隔方法，而在模块中可使用两个空行来分隔类
    需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import语句，再添加一个空行，然后编写导入自己编写的模块的import语句


第十章 文件和异常
  10.1 从文件中读取数据
    读取整个文件
    with open('a.txt') as file_object:
        contents = file_object.read()
        print(contents)

    函数open()接受一个参数，文件名称，在当前工作路径目录下查找该文件
    关键字with在不再需要访问文件后将其关闭，也可以手动调用close()函数来关闭文件

    open()的参数可以是相对路径和绝对路径，在linux下路径使用/，windows下使用\，在python中\是转义标记，为在windows中正确应用，应以原始字符串的方式指定路径，即在字符串最前面的引号前加上r

    逐行读取
    with open('a.txt') as file_object:
        for line in file_object:
            print(line.rstrip()) #每行末尾有个换行符，print函数也会加个换行符

    with open('a.txt') as file_object:
        lines = file_object.readlines() #readlines()函数返回一个每行内容的列表

  10.2 写入文件
    with open('a.txt', 'w') as file_object:
        file_object.write("I love dota.")

    open()函数的第二个参数，默认是'r'只读模式，可选的还有'w'，写入模式，'a'，追加模式，'r+'可读可写模式
    python只能将字符串写入文本文件，对于数值类型，需要用str()函数将其转为字符串

  10.3 异常
    try:
        print(str(5/0))
    except Exception as ex:
        print(ex)
    else:
        print("success")

    若try里的语句成功执行后，才会执行else里的代码块

  10.4 存储数据
    import json
    json.dump() #后面用到时再查阅api
    json.load() #同上


第十一章 测试代码
  11.1 测试函数
    # 函数模块 name_function.py
    def get_formatted_name(first, last):
        """拼接名字"""
        full_name = first + ' ' + last
        return full_name.title()
    
    # 单元测试和测试用例 test_name_function.py
    import unittest
    from name_function import get_formatted_name

    class NamesTestCase(unittest.TestCase):
        """测试name_function.py"""

        def test_first_last_name(self):
            formatted_name = get_formatted_name('feng', 'haojie')
            self.assertEqual(formatted_name, 'Feng Haojie')
    
    if __name__ == '__main__'
        unittest.main()

    创建一个新的类，继承自 unittest.TestCase
    内部的测试函数必须以 test_ 打头，这样才会被自动运行
  
  11.2 测试类
    与测试函数类似，不过内部有一个方法 setUp() ，该方法会被率先执行，然后才会执行test_打头的测试函数，在其内部可以创建一些调查对象，供测试函数使用
    def setUp(self):
        """创建调查对象和一组答案，供使用的测试方法使用"""
        self.my_obj = Person('feng', 'haojie')
